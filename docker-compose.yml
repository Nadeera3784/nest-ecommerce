version: '3.8'

networks:
  ecommerce-network:
    driver: bridge

services:

  kong-database:
    image: postgres:13
    container_name: kong-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE}
      POSTGRES_USER: ${KONG_PG_USER}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD}
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  kong-migration:
    image: kong/kong-gateway:3.5
    container_name: kong-migration
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: on-failure

  kong:
    image: kong/kong-gateway:3.5
    container_name: kong-gateway
    restart: unless-stopped
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:${KONG_ADMIN_PORT}
      KONG_ADMIN_GUI_URL: http://localhost:${KONG_MANAGER_PORT}
      KONG_PROXY_LISTEN: 0.0.0.0:${KONG_PROXY_PORT}, 0.0.0.0:8443 ssl
    ports:
      - "${KONG_PROXY_PORT}:${KONG_PROXY_PORT}"   # Kong Proxy (HTTP)
      - "8443:8443"   # Kong Proxy (HTTPS)
      - "${KONG_ADMIN_PORT}:${KONG_ADMIN_PORT}"   # Kong Admin API
      - "${KONG_MANAGER_PORT}:${KONG_MANAGER_PORT}"   # Kong Manager (GUI)
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - ecommerce-network

  konga:
    image: pantsel/konga:latest
    container_name: konga
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_ADAPTER: postgres
      DB_HOST: ${KONG_PG_HOST}
      DB_PORT: ${KONG_PG_PORT}
      DB_DATABASE: konga
      DB_USER: ${KONG_PG_USER}
      DB_PASSWORD: ${KONG_PG_PASSWORD}
    ports:
      - "${KONGA_PORT}:1337"
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - ecommerce-network

  mongo_authentication:
    image: mongo:7.0
    container_name: mongo-authentication
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - 'mongodb_authentication_data:/data/db'
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  mongo_inventory:
    image: mongo:7.0
    container_name: mongo-inventory
    restart: always
    ports:
      - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - 'mongodb_inventory_data:/data/db'
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  mongo_payment:
    image: mongo:7.0
    container_name: mongo-payment
    restart: always
    ports:
      - 27019:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - 'mongodb_payment_data:/data/db'
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - 'rabbitmq_data:/var/lib/rabbitmq'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: always
    command: redis-server --requirepass ""
    ports:
      - 6379:6379
    volumes:
      - 'redis_data:/data'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  authentication:
    build:
      context: ./authentication
    container_name: authentication-service
    restart: unless-stopped
    depends_on:
      mongo_authentication:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV}
      - MONGODB_URL=${MONGODB_AUTH_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_TOKEN=${JWT_SECRET_TOKEN}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - JWT_REFRESH_TOKEN_EXPIRES_IN=${JWT_REFRESH_TOKEN_EXPIRES_IN}
      - APP_PORT=${APP_PORT}
      - APP_NAME=${APP_NAME}
      - PRODUCTION_MODE=${PRODUCTION_MODE}
      - RESEND_API_KEY=${RESEND_API_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ecommerce-network
    ports:
      - "${AUTHENTICATION_PORT}:3000"

  inventory:
    build:
      context: ./inventory
    container_name: inventory-service
    restart: unless-stopped
    depends_on:
      mongo_inventory:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV}
      - MONGODB_URL=${MONGODB_INVENTORY_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - REDIS_URL=${REDIS_URL}
      - PORT=3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ecommerce-network
    ports:
      - "${INVENTORY_PORT}:3000"

  payment:
    build:
      context: ./payment
    container_name: payment-service
    restart: unless-stopped
    depends_on:
      mongo_payment:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV}
      - MONGODB_URL=${MONGODB_PAYMENT_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - REDIS_URL=${REDIS_URL}
      - PORT=3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ecommerce-network
    ports:
      - "${PAYMENT_PORT}:3000"


  # es01:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
  #   restart: always
  #   environment:
  #     - node.name=es01
  #     - cluster.name=es-docker-cluster
  #     - discovery.seed_hosts=
  #     - cluster.initial_master_nodes=es01
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
  #     - http.cors.enabled=true
  #     - http.cors.allow-origin=/.*/
  #   ulimits:
  #     nproc: 8192
  #     nofile: 524288
  #     memlock: -1
  #   mem_limit: 3g
  #   volumes:
  #     - es_data:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200

volumes:
  kong_data:
    driver: local
  mongodb_authentication_data:
    driver: local
  mongodb_inventory_data:
    driver: local
  mongodb_payment_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  # es_data:
  #   driver: local
